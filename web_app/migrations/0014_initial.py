# Generated by Django 5.2.3 on 2025-07-02 13:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('min_moisture_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum moisture level (%) below which irrigation should be triggered.', max_digits=5, null=True)),
                ('optimal_moisture_min', models.DecimalField(blank=True, decimal_places=2, help_text='Optimal lower bound of moisture level (%).', max_digits=5, null=True)),
                ('optimal_moisture_max', models.DecimalField(blank=True, decimal_places=2, help_text='Optimal upper bound of moisture level (%).', max_digits=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('user_role', models.CharField(choices=[('admin', 'Admin'), ('farm_owner', 'Farm Owner'), ('viewer', 'Viewer')], default='farm_owner', max_length=20)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('email_notifications', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FarmSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('area_sq_m', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('sensor_location', models.CharField(blank=True, max_length=255, null=True)),
                ('last_calibrated', models.DateTimeField(blank=True, null=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farm_sections', to='web_app.farm')),
                ('plant_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='web_app.planttype')),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(max_length=100)),
                ('alert_message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('alert_time', models.DateTimeField(auto_now_add=True)),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('acknowledged_time', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('farm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='web_app.farm')),
                ('farm_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='web_app.farmsection')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moisture_level', models.DecimalField(decimal_places=2, max_digits=5)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('light_intensity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('pH_level', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('status', models.CharField(choices=[('normal', 'Normal'), ('alert', 'Alert'), ('offline', 'Offline'), ('error', 'Error')], default='normal', max_length=20)),
                ('pump_status', models.BooleanField(default=False)),
                ('water_level', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('farm_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_readings', to='web_app.farmsection')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='WaterTank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tank_name', models.CharField(max_length=100)),
                ('pump_is_on', models.BooleanField(default=False)),
                ('total_capacity_litres', models.IntegerField(blank=True, null=True)),
                ('empty_level_threshold_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('low_level_threshold_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('last_volume_litres', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sensor_pin_trig', models.IntegerField(blank=True, null=True)),
                ('sensor_pin_echo', models.IntegerField(blank=True, null=True)),
                ('last_reading_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('error', 'Error'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='water_tanks', to='web_app.farm')),
            ],
        ),
        migrations.CreateModel(
            name='IrrigationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('start_moisture', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('end_moisture', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('start_tank_volume', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('end_tank_volume', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('water_volume_dispensed', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('trigger_reason', models.CharField(blank=True, choices=[('schedule', 'Scheduled'), ('manual', 'Manual Trigger'), ('low_moisture', 'Low Moisture Level'), ('other', 'Other')], max_length=50, null=True)),
                ('event_status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='irrigation_events', to='web_app.farmsection')),
                ('tank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='irrigation_events', to='web_app.watertank')),
            ],
        ),
        migrations.CreateModel(
            name='FarmEventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(choices=[('system', 'Automated System'), ('manual', 'Manual User Action'), ('sensor', 'Sensor Reading'), ('pump', 'Pump Operation'), ('alert', 'Alert Trigger'), ('other', 'Other')], default='system', max_length=50)),
                ('farm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_log', to='web_app.farm')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_event_logs', to=settings.AUTH_USER_MODEL)),
                ('related_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_log', to='web_app.farmsection')),
                ('related_tank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_log', to='web_app.watertank')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
